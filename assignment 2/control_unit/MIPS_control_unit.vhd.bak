-- A code design for
-- Control unit of MIPS Processor
-- Dev : Aingkk.

LIBRARY ieee : 
USE ieee.std_logic_1164.ALL;
USE ieee.numeric_std.ALL;
USE ieee.std_logic_unsigned.ALL;

ENTITY MIPS_control_unit IS
	PORT (
 
		instruction_in : IN std_logic_vector(31 DOWNTO 0);
 
		RegDst : OUT std_logic;
		Jump : OUT std_logic;
		Branch : OUT std_logic;
		MemtoReq : OUT std_logic;
		MemRead : OUT std_logic;
		ALUOp : OUT std_logic_vector(1 DOWNTO 0);
		MemWrite : OUT std_logic;
		ALUSrc : OUT std_logic;
		RegWrite : OUT std_logic 
	);
END MIPS_control_unit;



ARCHITECTURE struct OF MIPS_control_unit IS
 
BEGIN
	PROCESS (instruction_in) 
 
	IF instruction_in(31 DOWNTO 26) = "0000000" THEN
		-- R - Type check bit 5 : 0
		-- check 5 : 3 first
 
		IF instruction_in(5 DOWNTO 3) = "100" THEN
			-- then check 2 : 0
			IF instruction_in(2 DOWNTO 0) = "000" THEN
				-- add
				RegDst 
				Jump 
				Branch 
				MemtoReq 
				MemRead 
				ALUOp    <= "10";
				MemWrite
				ALUSrc 
				RegWrite 
 
			ELSIF instruction_in(2 DOWNTO 0) = "000" THEN
				-- subtract
				RegDst 
				Jump 
				Branch 
				MemtoReq 
				MemRead 
				ALUOp    <= "10"; 
				MemWrite
				ALUSrc 
				RegWrite 				
 
			ELSIF instruction_in(2 DOWNTO 0) = "000" THEN
				-- and
				RegDst 
				Jump 
				Branch 
				MemtoReq 
				MemRead 
				ALUOp    <= "10"; 
				MemWrite
				ALUSrc 
				RegWrite 				
 
			ELSIF instruction_in(2 DOWNTO 0) = "000" THEN
				-- or
				RegDst 
				Jump 
				Branch 
				MemtoReq 
				MemRead 
				ALUOp    <= "10"; 
				MemWrite
				ALUSrc 
				RegWrite 				
 
			ELSE
				-- nor
				RegDst 
				Jump 
				Branch 
				MemtoReq 
				MemRead 
				ALUOp    <= "";  
				MemWrite
				ALUSrc 
				RegWrite 			
 
			END IF;
 
		ELSIF instruction_in(5 DOWNTO 3) = "101" THEN
			-- slt
			RegDst 
			Jump 
			Branch 
			MemtoReq 
			MemRead 
			ALUOp    <= "10";  
			MemWrite
			ALUSrc 
			RegWrite 			
 
		END IF;
 
	ELSE
		-- Operation
		-- check 31 : 26
		-- first check 31 : 29
		IF instruction_in(31 DOWNTO 29) = "000" THEN
			-- then check 28 : 26
			IF instruction_in(28 DOWNTO 26) = "010" THEN
				-- J - Type
				-- jump
				RegDst 
				Jump 
				Branch 
				MemtoReq 
				MemRead 
				ALUOp    <= "";  
				MemWrite
				ALUSrc 
				RegWrite 
 
			ELSIF instruction_in(28 DOWNTO 26) = "100" THEN
				-- beq
 				RegDst 
				Jump 
				Branch 
				MemtoReq 
				MemRead 
				ALUOp    <= "01";  
				MemWrite
				ALUSrc 
				RegWrite 
				
			ELSE
				-- bne
 				RegDst 
				Jump 
				Branch 
				MemtoReq 
				MemRead 
				ALUOp    <= "";  
				MemWrite
				ALUSrc 
				RegWrite 
				
			END IF;
 
		ELSIF instruction_in(31 DOWNTO 29) = "100" THEN
			-- load word
			RegDst 
			Jump 
			Branch 
			MemtoReq 
			MemRead 
			ALUOp    <= "00";  
			MemWrite
			ALUSrc 
			RegWrite 			
 
		ELSE
			-- store word
			RegDst 
			Jump 
			Branch 
			MemtoReq 
			MemRead 
			ALUOp    <= "00";  
			MemWrite
			ALUSrc 
			RegWrite 
 
		END IF;
 
	END IF;
 
END PROCESS;
 
END struct;
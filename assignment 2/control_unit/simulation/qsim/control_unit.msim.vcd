$comment
	File created using the following command:
		vcd file control_unit.msim.vcd -direction
$end
$date
	Sun Mar 05 20:59:34 2023
$end
$version
	ModelSim Version 2020.1
$end
$timescale
	1ps
$end

$scope module control_unit_vhd_vec_tst $end
$var wire 1 ! ALU_control_input [3] $end
$var wire 1 " ALU_control_input [2] $end
$var wire 1 # ALU_control_input [1] $end
$var wire 1 $ ALU_control_input [0] $end
$var wire 1 % ALUSrc $end
$var wire 1 & Branch $end
$var wire 1 ' instruction_in [31] $end
$var wire 1 ( instruction_in [30] $end
$var wire 1 ) instruction_in [29] $end
$var wire 1 * instruction_in [28] $end
$var wire 1 + instruction_in [27] $end
$var wire 1 , instruction_in [26] $end
$var wire 1 - instruction_in [25] $end
$var wire 1 . instruction_in [24] $end
$var wire 1 / instruction_in [23] $end
$var wire 1 0 instruction_in [22] $end
$var wire 1 1 instruction_in [21] $end
$var wire 1 2 instruction_in [20] $end
$var wire 1 3 instruction_in [19] $end
$var wire 1 4 instruction_in [18] $end
$var wire 1 5 instruction_in [17] $end
$var wire 1 6 instruction_in [16] $end
$var wire 1 7 instruction_in [15] $end
$var wire 1 8 instruction_in [14] $end
$var wire 1 9 instruction_in [13] $end
$var wire 1 : instruction_in [12] $end
$var wire 1 ; instruction_in [11] $end
$var wire 1 < instruction_in [10] $end
$var wire 1 = instruction_in [9] $end
$var wire 1 > instruction_in [8] $end
$var wire 1 ? instruction_in [7] $end
$var wire 1 @ instruction_in [6] $end
$var wire 1 A instruction_in [5] $end
$var wire 1 B instruction_in [4] $end
$var wire 1 C instruction_in [3] $end
$var wire 1 D instruction_in [2] $end
$var wire 1 E instruction_in [1] $end
$var wire 1 F instruction_in [0] $end
$var wire 1 G Jump $end
$var wire 1 H MemRead $end
$var wire 1 I MemtoReg $end
$var wire 1 J MemWrite $end
$var wire 1 K RegDst $end
$var wire 1 L RegWrite $end

$scope module i1 $end
$var wire 1 M gnd $end
$var wire 1 N vcc $end
$var wire 1 O unknown $end
$var wire 1 P devoe $end
$var wire 1 Q devclrn $end
$var wire 1 R devpor $end
$var wire 1 S ww_devoe $end
$var wire 1 T ww_devclrn $end
$var wire 1 U ww_devpor $end
$var wire 1 V ww_instruction_in [31] $end
$var wire 1 W ww_instruction_in [30] $end
$var wire 1 X ww_instruction_in [29] $end
$var wire 1 Y ww_instruction_in [28] $end
$var wire 1 Z ww_instruction_in [27] $end
$var wire 1 [ ww_instruction_in [26] $end
$var wire 1 \ ww_instruction_in [25] $end
$var wire 1 ] ww_instruction_in [24] $end
$var wire 1 ^ ww_instruction_in [23] $end
$var wire 1 _ ww_instruction_in [22] $end
$var wire 1 ` ww_instruction_in [21] $end
$var wire 1 a ww_instruction_in [20] $end
$var wire 1 b ww_instruction_in [19] $end
$var wire 1 c ww_instruction_in [18] $end
$var wire 1 d ww_instruction_in [17] $end
$var wire 1 e ww_instruction_in [16] $end
$var wire 1 f ww_instruction_in [15] $end
$var wire 1 g ww_instruction_in [14] $end
$var wire 1 h ww_instruction_in [13] $end
$var wire 1 i ww_instruction_in [12] $end
$var wire 1 j ww_instruction_in [11] $end
$var wire 1 k ww_instruction_in [10] $end
$var wire 1 l ww_instruction_in [9] $end
$var wire 1 m ww_instruction_in [8] $end
$var wire 1 n ww_instruction_in [7] $end
$var wire 1 o ww_instruction_in [6] $end
$var wire 1 p ww_instruction_in [5] $end
$var wire 1 q ww_instruction_in [4] $end
$var wire 1 r ww_instruction_in [3] $end
$var wire 1 s ww_instruction_in [2] $end
$var wire 1 t ww_instruction_in [1] $end
$var wire 1 u ww_instruction_in [0] $end
$var wire 1 v ww_RegDst $end
$var wire 1 w ww_Jump $end
$var wire 1 x ww_Branch $end
$var wire 1 y ww_MemtoReg $end
$var wire 1 z ww_MemRead $end
$var wire 1 { ww_MemWrite $end
$var wire 1 | ww_ALUSrc $end
$var wire 1 } ww_RegWrite $end
$var wire 1 ~ ww_ALU_control_input [3] $end
$var wire 1 !! ww_ALU_control_input [2] $end
$var wire 1 "! ww_ALU_control_input [1] $end
$var wire 1 #! ww_ALU_control_input [0] $end
$var wire 1 $! \instruction_in[6]~input_o\ $end
$var wire 1 %! \instruction_in[7]~input_o\ $end
$var wire 1 &! \instruction_in[8]~input_o\ $end
$var wire 1 '! \instruction_in[9]~input_o\ $end
$var wire 1 (! \instruction_in[10]~input_o\ $end
$var wire 1 )! \instruction_in[11]~input_o\ $end
$var wire 1 *! \instruction_in[12]~input_o\ $end
$var wire 1 +! \instruction_in[13]~input_o\ $end
$var wire 1 ,! \instruction_in[14]~input_o\ $end
$var wire 1 -! \instruction_in[15]~input_o\ $end
$var wire 1 .! \instruction_in[16]~input_o\ $end
$var wire 1 /! \instruction_in[17]~input_o\ $end
$var wire 1 0! \instruction_in[18]~input_o\ $end
$var wire 1 1! \instruction_in[19]~input_o\ $end
$var wire 1 2! \instruction_in[20]~input_o\ $end
$var wire 1 3! \instruction_in[21]~input_o\ $end
$var wire 1 4! \instruction_in[22]~input_o\ $end
$var wire 1 5! \instruction_in[23]~input_o\ $end
$var wire 1 6! \instruction_in[24]~input_o\ $end
$var wire 1 7! \instruction_in[25]~input_o\ $end
$var wire 1 8! \RegDst~output_o\ $end
$var wire 1 9! \Jump~output_o\ $end
$var wire 1 :! \Branch~output_o\ $end
$var wire 1 ;! \MemtoReg~output_o\ $end
$var wire 1 <! \MemRead~output_o\ $end
$var wire 1 =! \MemWrite~output_o\ $end
$var wire 1 >! \ALUSrc~output_o\ $end
$var wire 1 ?! \RegWrite~output_o\ $end
$var wire 1 @! \ALU_control_input[0]~output_o\ $end
$var wire 1 A! \ALU_control_input[1]~output_o\ $end
$var wire 1 B! \ALU_control_input[2]~output_o\ $end
$var wire 1 C! \ALU_control_input[3]~output_o\ $end
$var wire 1 D! \instruction_in[28]~input_o\ $end
$var wire 1 E! \instruction_in[31]~input_o\ $end
$var wire 1 F! \instruction_in[29]~input_o\ $end
$var wire 1 G! \instruction_in[30]~input_o\ $end
$var wire 1 H! \instruction_in[26]~input_o\ $end
$var wire 1 I! \instruction_in[27]~input_o\ $end
$var wire 1 J! \MIPSCon|Equal0~0_combout\ $end
$var wire 1 K! \instruction_in[4]~input_o\ $end
$var wire 1 L! \instruction_in[5]~input_o\ $end
$var wire 1 M! \MIPSCon|Equal0~1_combout\ $end
$var wire 1 N! \MIPSCon|RegDst~0_combout\ $end
$var wire 1 O! \MIPSCon|RegDst~combout\ $end
$var wire 1 P! \MIPSCon|Jump~0_combout\ $end
$var wire 1 Q! \MIPSCon|Jump~combout\ $end
$var wire 1 R! \MIPSCon|Branch~0_combout\ $end
$var wire 1 S! \MIPSCon|Branch~combout\ $end
$var wire 1 T! \MIPSCon|MemtoReg~0_combout\ $end
$var wire 1 U! \MIPSCon|MemtoReg~combout\ $end
$var wire 1 V! \MIPSCon|MemtoReg~1_combout\ $end
$var wire 1 W! \MIPSCon|MemWrite~combout\ $end
$var wire 1 X! \MIPSCon|ALUSrc~combout\ $end
$var wire 1 Y! \instruction_in[1]~input_o\ $end
$var wire 1 Z! \instruction_in[0]~input_o\ $end
$var wire 1 [! \instruction_in[2]~input_o\ $end
$var wire 1 \! \instruction_in[3]~input_o\ $end
$var wire 1 ]! \ALUCon|Equal2~0_combout\ $end
$var wire 1 ^! \ALUCon|ALU_control_input[0]~0_combout\ $end
$var wire 1 _! \ALUCon|ALU_control_input[1]~1_combout\ $end
$var wire 1 `! \ALUCon|ALU_control_input[2]~2_combout\ $end
$var wire 1 a! \ALUCon|ALU_control_input[3]~3_combout\ $end
$var wire 1 b! \ALT_INV_instruction_in[27]~input_o\ $end
$var wire 1 c! \ALT_INV_instruction_in[26]~input_o\ $end
$var wire 1 d! \ALT_INV_instruction_in[30]~input_o\ $end
$var wire 1 e! \ALT_INV_instruction_in[29]~input_o\ $end
$var wire 1 f! \ALT_INV_instruction_in[31]~input_o\ $end
$var wire 1 g! \ALT_INV_instruction_in[28]~input_o\ $end
$var wire 1 h! \ALT_INV_instruction_in[5]~input_o\ $end
$var wire 1 i! \ALT_INV_instruction_in[4]~input_o\ $end
$var wire 1 j! \ALT_INV_instruction_in[3]~input_o\ $end
$var wire 1 k! \ALT_INV_instruction_in[2]~input_o\ $end
$var wire 1 l! \ALT_INV_instruction_in[0]~input_o\ $end
$var wire 1 m! \ALT_INV_instruction_in[1]~input_o\ $end
$var wire 1 n! \ALUCon|ALT_INV_Equal2~0_combout\ $end
$var wire 1 o! \MIPSCon|ALT_INV_Equal0~0_combout\ $end
$var wire 1 p! \MIPSCon|ALT_INV_Equal0~1_combout\ $end
$var wire 1 q! \MIPSCon|ALT_INV_Jump~0_combout\ $end
$var wire 1 r! \MIPSCon|ALT_INV_RegDst~0_combout\ $end
$var wire 1 s! \MIPSCon|ALT_INV_Branch~0_combout\ $end
$var wire 1 t! \MIPSCon|ALT_INV_MemWrite~combout\ $end
$var wire 1 u! \MIPSCon|ALT_INV_ALUSrc~combout\ $end
$var wire 1 v! \MIPSCon|ALT_INV_MemtoReg~0_combout\ $end
$var wire 1 w! \MIPSCon|ALT_INV_MemtoReg~1_combout\ $end
$var wire 1 x! \MIPSCon|ALT_INV_RegDst~combout\ $end
$var wire 1 y! \MIPSCon|ALT_INV_Branch~combout\ $end
$var wire 1 z! \MIPSCon|ALT_INV_Jump~combout\ $end
$var wire 1 {! \MIPSCon|ALT_INV_MemtoReg~combout\ $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0%
0&
0G
0H
0I
0J
1K
0L
0M
1N
xO
1P
1Q
1R
1S
1T
1U
1v
0w
0x
0y
0z
0{
0|
0}
0$!
0%!
0&!
0'!
0(!
0)!
0*!
1+!
0,!
0-!
1.!
0/!
00!
11!
12!
03!
04!
05!
16!
07!
18!
09!
0:!
0;!
0<!
0=!
0>!
0?!
0@!
0A!
0B!
0C!
0D!
0E!
0F!
0G!
0H!
0I!
1J!
0K!
1L!
1M!
1N!
1O!
1P!
0Q!
0R!
0S!
0T!
0U!
1V!
0W!
0X!
0Y!
0Z!
1[!
0\!
1]!
0^!
0_!
0`!
0a!
1b!
1c!
1d!
1e!
1f!
1g!
0h!
1i!
1j!
0k!
1l!
1m!
0n!
0o!
0p!
0q!
0r!
1s!
1t!
1u!
1v!
0w!
0x!
1y!
1z!
1{!
0'
0(
0)
0*
0+
0,
0-
1.
0/
00
01
12
13
04
05
16
07
08
19
0:
0;
0<
0=
0>
0?
0@
1A
0B
0C
1D
0E
0F
0!
0"
0#
0$
0V
0W
0X
0Y
0Z
0[
0\
1]
0^
0_
0`
1a
1b
0c
0d
1e
0f
0g
1h
0i
0j
0k
0l
0m
0n
0o
1p
0q
0r
1s
0t
0u
0~
0!!
0"!
0#!
$end
#1000000
